<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Speech Recognition Search</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .bg-sky-blue {
            background-color: #e0f2f7; /* A light sky blue */
        }
        .text-sky-blue {
            color: #29b6f6; /* A medium sky blue */
        }
        .border-sky-blue {
            border-color: #29b6f6;
        }
        .focus\:ring-sky-blue:focus {
            --tw-ring-color: #29b6f6;
        }

        .bg-sky-blue-hover:hover {
            background-color: #81d4fa; /* Lighter shade for hover effect */
        }
    </style>
</head>
<body class="bg-gray-100 flex justify-center items-center min-h-screen bg-sky-blue">
    <div class="bg-white rounded-lg shadow-lg p-8 max-w-md w-full">
        <h1 class="text-2xl font-semibold text-sky-blue text-center mb-6">Speech Recognition Search</h1>
        <div class="flex items-center mb-4">
            <input type="text" id="search-box" placeholder="Speak to search..." class="flex-grow rounded-l-md border-gray-300 focus:ring-2 focus:ring-sky-blue border-sky-blue p-2">
            <button id="start-button" class="bg-blue-500 hover:bg-sky-blue-hover text-white rounded-r-md p-2 focus:outline-none focus:ring-2 focus:ring-sky-blue focus:ring-opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic">
                    <path d="M12 13c-1.654 0-3-1.346-3-3V5a3 3 0 0 1 6 0v5c0 1.654-1.346 3-3 3z"></path>
                    <path d="M19 10v2c0 5.228-4.272 9.5-9.5 9.5S0 17.228 0 12v-2"></path>
                    <line x1="12" x2="12" y1="19" y2="23"></line>
                </svg>
            </button>
        </div>
        <div id="error-message" class="mt-4 p-4 bg-red-100 text-red-600 rounded-md border border-red-300 hidden">
        </div>
    </div>

    <script>
        window.onload = function() {
            const searchBox = document.getElementById('search-box');
            const startButton = document.getElementById('start-button');
            const errorMessageElement = document.getElementById('error-message');

            let recognition;
            let isListening = false;

            // Check for speech recognition support
            if ('webkitSpeechRecognition' in window) {
                recognition = new webkitSpeechRecognition();
            } else if ('speechRecognition' in window) {
                recognition = new speechRecognition();
            } else {
                errorMessageElement.textContent = "Speech recognition is not supported in this browser.";
                errorMessageElement.classList.remove('hidden');
                startButton.disabled = true;
                return;
            }

            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = 'en-US'; // Set the language

            // Speech recognition start event
            recognition.onstart = function() {
                isListening = true;
                startButton.classList.remove('bg-blue-500', 'hover:bg-sky-blue-hover');
                startButton.classList.add('bg-green-500', 'hover:bg-green-600');
                searchBox.placeholder = "Listening...";
            };

            // Speech recognition end event
            recognition.onend = function() {
                isListening = false;
                startButton.classList.remove('bg-green-500', 'hover:bg-green-600');
                startButton.classList.add('bg-blue-500', 'hover:bg-sky-blue-hover');
                searchBox.placeholder = "Speak to search...";
            };

            // Speech recognition result event
            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                searchBox.value = transcript;
                performGoogleSearch(transcript);
            };

            // Speech recognition error event
            recognition.onerror = function(event) {
                isListening = false;
                startButton.classList.remove('bg-green-500', 'hover:bg-green-600');
                startButton.classList.add('bg-blue-500', 'hover:bg-sky-blue-hover');
                searchBox.placeholder = "Speak to search...";
                let errorMessage = 'An error occurred: ' + event.error;
                if (event.error === 'no-speech') {
                    errorMessage = 'No speech was detected. Please try again.';
                } else if (event.error === 'aborted') {
                    errorMessage = 'Speech recognition was aborted.';
                } else if (event.error === 'network') {
                    errorMessage = 'A network error occurred. Please check your internet connection.';
                } else if (event.error === 'audio-capture') {
                    errorMessage = 'Audio capture failed. Please make sure your microphone is working.';
                } else if (event.error === 'not-allowed') {
                    errorMessage = 'Speech recognition permission was denied. Please allow microphone access in your browser settings.';
                } else if (event.error === 'service-unavailable') {
                    errorMessage = 'Speech recognition service is unavailable. Please try again later.';
                } else if (event.error === 'language-not-supported') {
                    errorMessage = 'The selected language is not supported.';
                }
                errorMessageElement.textContent = errorMessage;
                errorMessageElement.classList.remove('hidden');
            };

            // Start/Stop button click event
            startButton.addEventListener('click', function() {
                errorMessageElement.classList.add('hidden');
                if (isListening) {
                    recognition.stop();
                } else {
                    recognition.start();
                }
            });

            // Perform Google search function
            function performGoogleSearch(query) {
                if (query.trim() !== '') {
                    const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
                    window.location.href = googleSearchUrl;
                }
            }

            // Perform Google search on Enter key press in the search box
            searchBox.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    performGoogleSearch(searchBox.value);
                }
            });
        };
    </script>
</body>
</html> Speech based search engine.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice to Text - Neon RGB Writing</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #111; /* Very dark background */
            color: #fff; /* Default white text */
            margin: 0;
            padding: 30px;
        }

        h1 {
            color: #00ff88; /* Bright green heading */
            margin-bottom: 25px;
            text-align: left;
            width: 80%;
            max-width: 600px;
            text-shadow: 0 0 10px #00ff88; /* Neon glow */
        }

        .container {
            background-color: #222;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0, 255, 136, 0.2); /* Green neon shadow */
            width: 80%;
            max-width: 600px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            border: 1px solid #00ff8833; /* Subtle neon green border */
        }

        textarea {
            width: calc(100% - 20px);
            min-height: 150px;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #555;
            border-radius: 6px;
            font-size: 16px;
            color: #ccff00; /* Bright yellow text in textarea */
            background-color: #333;
            box-sizing: border-box;
            align-self: stretch;
            text-shadow: 0 0 5px #ccff0080; /* Subtle yellow glow */
        }

        .button-container {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
            align-self: flex-start;
        }

        button {
            padding: 12px 24px;
            font-size: 16px;
            background-color: #ff44cc; /* Bright pink button */
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease-in-out, box-shadow 0.3s ease;
            box-shadow: 0 0 8px #ff44cc80; /* Pink neon glow */
        }

        button:hover {
            background-color: #d81b60; /* Darker pink on hover */
            transform: scale(1.05);
            box-shadow: 0 0 12px #ff44cc; /* Stronger glow on hover */
        }

        .recording-indicator {
            width: 15px;
            height: 15px;
            background-color: #00bfff; /* Bright cyan */
            border-radius: 50%; /* Circle shape */
            box-shadow: 0 0 8px #00bfff80; /* Cyan neon glow */
            animation: neon-pulse 1.5s infinite alternate;
        }

        @keyframes neon-pulse {
            from { box-shadow: 0 0 8px #00bfff80; }
            to { box-shadow: 0 0 15px #00bfff; }
        }

        .recording .recording-indicator {
            background-color: #ff00ff; /* Bright magenta when recording */
            box-shadow: 0 0 10px #ff00ff; /* Magenta neon glow */
        }

        #status {
            margin-top: 15px;
            font-weight: bold;
            color: #00ffff; /* Bright cyan status text */
            text-align: left;
            width: 100%;
            text-shadow: 0 0 5px #00ffff80; /* Cyan glow */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Hands-Free Writing</h1>
        <textarea id="writtenText" placeholder="Start speaking to type..."></textarea>
        <div class="button-container">
            <button id="startButton">Start Recording</button>
            <div class="recording-indicator"></div>
        </div>
        <p id="status">Click "Start Recording" and begin speaking.</p>
    </div>

    <script>
        const writtenTextElement = document.getElementById('writtenText');
        const startButton = document.getElementById('startButton');
        const statusElement = document.getElementById('status');
        const recordingIndicator = document.querySelector('.recording-indicator');
        const container = document.querySelector('.container');
        let recognition;
        let isRecording = false;

        if ('webkitSpeechRecognition' in window) {
            recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US'; // You can set the preferred language

            recognition.onstart = () => {
                isRecording = true;
                startButton.textContent = 'Stop Recording';
                statusElement.textContent = 'Recording...';
                container.classList.add('recording');
            };

            recognition.onresult = (event) => {
                let interimTranscript = '';
                let finalTranscript = '';

                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript + ' '; // Add space after final results
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }

                writtenTextElement.value = finalTranscript + interimTranscript;
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                statusElement.textContent = `Error: ${event.error}`;
                container.classList.remove('recording');
                isRecording = false;
                startButton.textContent = 'Start Recording';
            };

            recognition.onend = () => {
                isRecording = false;
                startButton.textContent = 'Start Recording';
                statusElement.textContent = 'Click "Start Recording" and begin speaking.';
                container.classList.remove('recording');
            };

            startButton.addEventListener('click', () => {
                if (!isRecording) {
                    writtenTextElement.value = ''; // Clear previous text when starting new recording
                    recognition.start();
                } else {
                    recognition.stop();
                }
            });
        } else {
            statusElement.textContent = 'Your browser does not support Speech Recognition.';
            startButton.disabled = true;
        }
    </script>
</body>
</html> voice to text.html
